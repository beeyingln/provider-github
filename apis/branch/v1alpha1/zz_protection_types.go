/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProtectionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ProtectionParameters struct {

	// +kubebuilder:validation:Optional
	AllowsDeletions *bool `json:"allowsDeletions,omitempty" tf:"allows_deletions,omitempty"`

	// +kubebuilder:validation:Optional
	AllowsForcePushes *bool `json:"allowsForcePushes,omitempty" tf:"allows_force_pushes,omitempty"`

	// +kubebuilder:validation:Optional
	EnforceAdmins *bool `json:"enforceAdmins,omitempty" tf:"enforce_admins,omitempty"`

	// +kubebuilder:validation:Required
	Pattern *string `json:"pattern" tf:"pattern,omitempty"`

	// +kubebuilder:validation:Optional
	PushRestrictions []*string `json:"pushRestrictions,omitempty" tf:"push_restrictions,omitempty"`

	// Node ID or name of repository
	// +kubebuilder:validation:Required
	RepositoryID *string `json:"repositoryId" tf:"repository_id,omitempty"`

	// +kubebuilder:validation:Optional
	RequireConversationResolution *bool `json:"requireConversationResolution,omitempty" tf:"require_conversation_resolution,omitempty"`

	// +kubebuilder:validation:Optional
	RequireSignedCommits *bool `json:"requireSignedCommits,omitempty" tf:"require_signed_commits,omitempty"`

	// +kubebuilder:validation:Optional
	RequiredLinearHistory *bool `json:"requiredLinearHistory,omitempty" tf:"required_linear_history,omitempty"`

	// +kubebuilder:validation:Optional
	RequiredPullRequestReviews []RequiredPullRequestReviewsParameters `json:"requiredPullRequestReviews,omitempty" tf:"required_pull_request_reviews,omitempty"`

	// +kubebuilder:validation:Optional
	RequiredStatusChecks []RequiredStatusChecksParameters `json:"requiredStatusChecks,omitempty" tf:"required_status_checks,omitempty"`
}

type RequiredPullRequestReviewsObservation struct {
}

type RequiredPullRequestReviewsParameters struct {

	// +kubebuilder:validation:Optional
	DismissStaleReviews *bool `json:"dismissStaleReviews,omitempty" tf:"dismiss_stale_reviews,omitempty"`

	// +kubebuilder:validation:Optional
	DismissalRestrictions []*string `json:"dismissalRestrictions,omitempty" tf:"dismissal_restrictions,omitempty"`

	// +kubebuilder:validation:Optional
	RequireCodeOwnerReviews *bool `json:"requireCodeOwnerReviews,omitempty" tf:"require_code_owner_reviews,omitempty"`

	// +kubebuilder:validation:Optional
	RequiredApprovingReviewCount *float64 `json:"requiredApprovingReviewCount,omitempty" tf:"required_approving_review_count,omitempty"`

	// +kubebuilder:validation:Optional
	RestrictDismissals *bool `json:"restrictDismissals,omitempty" tf:"restrict_dismissals,omitempty"`
}

type RequiredStatusChecksObservation struct {
}

type RequiredStatusChecksParameters struct {

	// +kubebuilder:validation:Optional
	Contexts []*string `json:"contexts,omitempty" tf:"contexts,omitempty"`

	// +kubebuilder:validation:Optional
	Strict *bool `json:"strict,omitempty" tf:"strict,omitempty"`
}

// ProtectionSpec defines the desired state of Protection
type ProtectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProtectionParameters `json:"forProvider"`
}

// ProtectionStatus defines the observed state of Protection.
type ProtectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProtectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Protection is the Schema for the Protections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,githubjet}
type Protection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProtectionSpec   `json:"spec"`
	Status            ProtectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProtectionList contains a list of Protections
type ProtectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Protection `json:"items"`
}

// Repository type metadata.
var (
	Protection_Kind             = "Protection"
	Protection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Protection_Kind}.String()
	Protection_KindAPIVersion   = Protection_Kind + "." + CRDGroupVersion.String()
	Protection_GroupVersionKind = CRDGroupVersion.WithKind(Protection_Kind)
)

func init() {
	SchemeBuilder.Register(&Protection{}, &ProtectionList{})
}
