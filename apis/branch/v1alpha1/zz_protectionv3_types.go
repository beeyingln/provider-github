/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProtectionV3Observation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ProtectionV3Parameters struct {

	// +kubebuilder:validation:Required
	Branch *string `json:"branch" tf:"branch,omitempty"`

	// +kubebuilder:validation:Optional
	EnforceAdmins *bool `json:"enforceAdmins,omitempty" tf:"enforce_admins,omitempty"`

	// +kubebuilder:validation:Required
	Repository *string `json:"repository" tf:"repository,omitempty"`

	// +kubebuilder:validation:Optional
	RequireConversationResolution *bool `json:"requireConversationResolution,omitempty" tf:"require_conversation_resolution,omitempty"`

	// +kubebuilder:validation:Optional
	RequireSignedCommits *bool `json:"requireSignedCommits,omitempty" tf:"require_signed_commits,omitempty"`

	// +kubebuilder:validation:Optional
	RequiredPullRequestReviews []ProtectionV3RequiredPullRequestReviewsParameters `json:"requiredPullRequestReviews,omitempty" tf:"required_pull_request_reviews,omitempty"`

	// +kubebuilder:validation:Optional
	RequiredStatusChecks []ProtectionV3RequiredStatusChecksParameters `json:"requiredStatusChecks,omitempty" tf:"required_status_checks,omitempty"`

	// +kubebuilder:validation:Optional
	Restrictions []RestrictionsParameters `json:"restrictions,omitempty" tf:"restrictions,omitempty"`
}

type ProtectionV3RequiredPullRequestReviewsObservation struct {
}

type ProtectionV3RequiredPullRequestReviewsParameters struct {

	// +kubebuilder:validation:Optional
	DismissStaleReviews *bool `json:"dismissStaleReviews,omitempty" tf:"dismiss_stale_reviews,omitempty"`

	// +kubebuilder:validation:Optional
	DismissalTeams []*string `json:"dismissalTeams,omitempty" tf:"dismissal_teams,omitempty"`

	// +kubebuilder:validation:Optional
	DismissalUsers []*string `json:"dismissalUsers,omitempty" tf:"dismissal_users,omitempty"`

	// +kubebuilder:validation:Optional
	IncludeAdmins *bool `json:"includeAdmins,omitempty" tf:"include_admins,omitempty"`

	// +kubebuilder:validation:Optional
	RequireCodeOwnerReviews *bool `json:"requireCodeOwnerReviews,omitempty" tf:"require_code_owner_reviews,omitempty"`

	// +kubebuilder:validation:Optional
	RequiredApprovingReviewCount *float64 `json:"requiredApprovingReviewCount,omitempty" tf:"required_approving_review_count,omitempty"`
}

type ProtectionV3RequiredStatusChecksObservation struct {
}

type ProtectionV3RequiredStatusChecksParameters struct {

	// +kubebuilder:validation:Optional
	Contexts []*string `json:"contexts,omitempty" tf:"contexts,omitempty"`

	// +kubebuilder:validation:Optional
	IncludeAdmins *bool `json:"includeAdmins,omitempty" tf:"include_admins,omitempty"`

	// +kubebuilder:validation:Optional
	Strict *bool `json:"strict,omitempty" tf:"strict,omitempty"`
}

type RestrictionsObservation struct {
}

type RestrictionsParameters struct {

	// +kubebuilder:validation:Optional
	Apps []*string `json:"apps,omitempty" tf:"apps,omitempty"`

	// +kubebuilder:validation:Optional
	Teams []*string `json:"teams,omitempty" tf:"teams,omitempty"`

	// +kubebuilder:validation:Optional
	Users []*string `json:"users,omitempty" tf:"users,omitempty"`
}

// ProtectionV3Spec defines the desired state of ProtectionV3
type ProtectionV3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProtectionV3Parameters `json:"forProvider"`
}

// ProtectionV3Status defines the observed state of ProtectionV3.
type ProtectionV3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProtectionV3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProtectionV3 is the Schema for the ProtectionV3s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,githubjet}
type ProtectionV3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProtectionV3Spec   `json:"spec"`
	Status            ProtectionV3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProtectionV3List contains a list of ProtectionV3s
type ProtectionV3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProtectionV3 `json:"items"`
}

// Repository type metadata.
var (
	ProtectionV3_Kind             = "ProtectionV3"
	ProtectionV3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProtectionV3_Kind}.String()
	ProtectionV3_KindAPIVersion   = ProtectionV3_Kind + "." + CRDGroupVersion.String()
	ProtectionV3_GroupVersionKind = CRDGroupVersion.WithKind(ProtectionV3_Kind)
)

func init() {
	SchemeBuilder.Register(&ProtectionV3{}, &ProtectionV3List{})
}
