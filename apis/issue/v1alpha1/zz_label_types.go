/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LabelObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type LabelParameters struct {

	// +kubebuilder:validation:Required
	Color *string `json:"color" tf:"color,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Repository *string `json:"repository" tf:"repository,omitempty"`
}

// LabelSpec defines the desired state of Label
type LabelSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LabelParameters `json:"forProvider"`
}

// LabelStatus defines the observed state of Label.
type LabelStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LabelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Label is the Schema for the Labels API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,githubjet}
type Label struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LabelSpec   `json:"spec"`
	Status            LabelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LabelList contains a list of Labels
type LabelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Label `json:"items"`
}

// Repository type metadata.
var (
	Label_Kind             = "Label"
	Label_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Label_Kind}.String()
	Label_KindAPIVersion   = Label_Kind + "." + CRDGroupVersion.String()
	Label_GroupVersionKind = CRDGroupVersion.WithKind(Label_Kind)
)

func init() {
	SchemeBuilder.Register(&Label{}, &LabelList{})
}
