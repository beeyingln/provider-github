/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package tools

import (
	"errors"
	"encoding/json"

	v1alpha1team "github.com/crossplane-contrib/provider-jet-github/apis/team/v1alpha1"
v1alpha1user "github.com/crossplane-contrib/provider-jet-github/apis/user/v1alpha1"
v1alpha1actions "github.com/crossplane-contrib/provider-jet-github/apis/actions/v1alpha1"
v1alpha1organization "github.com/crossplane-contrib/provider-jet-github/apis/organization/v1alpha1"
v1alpha1branch "github.com/crossplane-contrib/provider-jet-github/apis/branch/v1alpha1"
v1alpha1issue "github.com/crossplane-contrib/provider-jet-github/apis/issue/v1alpha1"
v1alpha1 "github.com/crossplane-contrib/provider-jet-github/apis/repository/v1alpha1"
v1alpha1app "github.com/crossplane-contrib/provider-jet-github/apis/app/v1alpha1"
v1alpha1project "github.com/crossplane-contrib/provider-jet-github/apis/project/v1alpha1"
v1alpha1github "github.com/crossplane-contrib/provider-jet-github/apis/github/v1alpha1"

	tfjson "github.com/crossplane/terrajet/pkg/resource/json"
	"k8s.io/apimachinery/pkg/runtime"
	
)

func GetObservationId(terraformResourceType string, data []byte) (string, error) {
	switch terraformResourceType {
	
	case "github_actions_environment_secret":
		obj := &v1alpha1actions.EnvironmentSecretObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_actions_organization_permissions":
		obj := &v1alpha1actions.OrganizationPermissionsObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_actions_organization_secret":
		obj := &v1alpha1actions.OrganizationSecretObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_actions_organization_secret_repositories":
		obj := &v1alpha1actions.OrganizationSecretRepositoriesObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_actions_runner_group":
		obj := &v1alpha1actions.RunnerGroupObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_actions_secret":
		obj := &v1alpha1actions.SecretObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_app_installation_repository":
		obj := &v1alpha1app.InstallationRepositoryObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_branch":
		obj := &v1alpha1github.BranchObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_branch_default":
		obj := &v1alpha1branch.DefaultObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_branch_protection":
		obj := &v1alpha1branch.ProtectionObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_branch_protection_v3":
		obj := &v1alpha1branch.ProtectionV3Observation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_issue_label":
		obj := &v1alpha1issue.LabelObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_membership":
		obj := &v1alpha1github.MembershipObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_organization_block":
		obj := &v1alpha1organization.BlockObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_organization_project":
		obj := &v1alpha1organization.ProjectObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_organization_webhook":
		obj := &v1alpha1organization.WebhookObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_project_card":
		obj := &v1alpha1project.CardObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_project_column":
		obj := &v1alpha1project.ColumnObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_repository":
		obj := &v1alpha1github.RepositoryObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_repository_autolink_reference":
		obj := &v1alpha1.AutolinkReferenceObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_repository_collaborator":
		obj := &v1alpha1.CollaboratorObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_repository_deploy_key":
		obj := &v1alpha1.DeployKeyObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_repository_environment":
		obj := &v1alpha1.EnvironmentObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_repository_file":
		obj := &v1alpha1.FileObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_repository_milestone":
		obj := &v1alpha1.MilestoneObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_repository_project":
		obj := &v1alpha1.ProjectObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_repository_pull_request":
		obj := &v1alpha1.PullRequestObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_repository_webhook":
		obj := &v1alpha1.WebhookObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_team":
		obj := &v1alpha1github.TeamObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_team_membership":
		obj := &v1alpha1team.MembershipObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_team_repository":
		obj := &v1alpha1team.RepositoryObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_team_sync_group_mapping":
		obj := &v1alpha1team.SyncGroupMappingObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_user_gpg_key":
		obj := &v1alpha1user.GpgKeyObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_user_invitation_accepter":
		obj := &v1alpha1user.InvitationAccepterObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	case "github_user_ssh_key":
		obj := &v1alpha1user.SSHKeyObservation{}
		err := json.Unmarshal(data, obj)
		if err != nil {
			return "", err
		}
		return *obj.ID, nil
    
	default:
		return "", errors.New("Invalid Resource Type " + terraformResourceType)
	}
}

func ConvertJSONToResourceParameters(terraformResourceType string, data runtime.RawExtension) (interface{}, error) {
	var rp interface{}

	switch terraformResourceType {
	
	case "github_actions_environment_secret":
		rp = &v1alpha1actions.EnvironmentSecretParameters{}
	
	case "github_actions_organization_permissions":
		rp = &v1alpha1actions.OrganizationPermissionsParameters{}
	
	case "github_actions_organization_secret":
		rp = &v1alpha1actions.OrganizationSecretParameters{}
	
	case "github_actions_organization_secret_repositories":
		rp = &v1alpha1actions.OrganizationSecretRepositoriesParameters{}
	
	case "github_actions_runner_group":
		rp = &v1alpha1actions.RunnerGroupParameters{}
	
	case "github_actions_secret":
		rp = &v1alpha1actions.SecretParameters{}
	
	case "github_app_installation_repository":
		rp = &v1alpha1app.InstallationRepositoryParameters{}
	
	case "github_branch":
		rp = &v1alpha1github.BranchParameters{}
	
	case "github_branch_default":
		rp = &v1alpha1branch.DefaultParameters{}
	
	case "github_branch_protection":
		rp = &v1alpha1branch.ProtectionParameters{}
	
	case "github_branch_protection_v3":
		rp = &v1alpha1branch.ProtectionV3Parameters{}
	
	case "github_issue_label":
		rp = &v1alpha1issue.LabelParameters{}
	
	case "github_membership":
		rp = &v1alpha1github.MembershipParameters{}
	
	case "github_organization_block":
		rp = &v1alpha1organization.BlockParameters{}
	
	case "github_organization_project":
		rp = &v1alpha1organization.ProjectParameters{}
	
	case "github_organization_webhook":
		rp = &v1alpha1organization.WebhookParameters{}
	
	case "github_project_card":
		rp = &v1alpha1project.CardParameters{}
	
	case "github_project_column":
		rp = &v1alpha1project.ColumnParameters{}
	
	case "github_repository":
		rp = &v1alpha1github.RepositoryParameters{}
	
	case "github_repository_autolink_reference":
		rp = &v1alpha1.AutolinkReferenceParameters{}
	
	case "github_repository_collaborator":
		rp = &v1alpha1.CollaboratorParameters{}
	
	case "github_repository_deploy_key":
		rp = &v1alpha1.DeployKeyParameters{}
	
	case "github_repository_environment":
		rp = &v1alpha1.EnvironmentParameters{}
	
	case "github_repository_file":
		rp = &v1alpha1.FileParameters{}
	
	case "github_repository_milestone":
		rp = &v1alpha1.MilestoneParameters{}
	
	case "github_repository_project":
		rp = &v1alpha1.ProjectParameters{}
	
	case "github_repository_pull_request":
		rp = &v1alpha1.PullRequestParameters{}
	
	case "github_repository_webhook":
		rp = &v1alpha1.WebhookParameters{}
	
	case "github_team":
		rp = &v1alpha1github.TeamParameters{}
	
	case "github_team_membership":
		rp = &v1alpha1team.MembershipParameters{}
	
	case "github_team_repository":
		rp = &v1alpha1team.RepositoryParameters{}
	
	case "github_team_sync_group_mapping":
		rp = &v1alpha1team.SyncGroupMappingParameters{}
	
	case "github_user_gpg_key":
		rp = &v1alpha1user.GpgKeyParameters{}
	
	case "github_user_invitation_accepter":
		rp = &v1alpha1user.InvitationAccepterParameters{}
	
	case "github_user_ssh_key":
		rp = &v1alpha1user.SSHKeyParameters{}
	
	default:
		return "", errors.New("Invalid Resource Type " + terraformResourceType)
	}

	err := json.Unmarshal(data.Raw, rp)
	if err != nil {
		return nil, err
	}

	return rp, nil
}

func ConvertTFJSONToResourceParameters(terraformResourceType string, data []byte) (interface{}, error) {
	var rp interface{}

	switch terraformResourceType {
	
	case "github_actions_environment_secret":
		rp = &v1alpha1actions.EnvironmentSecretParameters{}
	
	case "github_actions_organization_permissions":
		rp = &v1alpha1actions.OrganizationPermissionsParameters{}
	
	case "github_actions_organization_secret":
		rp = &v1alpha1actions.OrganizationSecretParameters{}
	
	case "github_actions_organization_secret_repositories":
		rp = &v1alpha1actions.OrganizationSecretRepositoriesParameters{}
	
	case "github_actions_runner_group":
		rp = &v1alpha1actions.RunnerGroupParameters{}
	
	case "github_actions_secret":
		rp = &v1alpha1actions.SecretParameters{}
	
	case "github_app_installation_repository":
		rp = &v1alpha1app.InstallationRepositoryParameters{}
	
	case "github_branch":
		rp = &v1alpha1github.BranchParameters{}
	
	case "github_branch_default":
		rp = &v1alpha1branch.DefaultParameters{}
	
	case "github_branch_protection":
		rp = &v1alpha1branch.ProtectionParameters{}
	
	case "github_branch_protection_v3":
		rp = &v1alpha1branch.ProtectionV3Parameters{}
	
	case "github_issue_label":
		rp = &v1alpha1issue.LabelParameters{}
	
	case "github_membership":
		rp = &v1alpha1github.MembershipParameters{}
	
	case "github_organization_block":
		rp = &v1alpha1organization.BlockParameters{}
	
	case "github_organization_project":
		rp = &v1alpha1organization.ProjectParameters{}
	
	case "github_organization_webhook":
		rp = &v1alpha1organization.WebhookParameters{}
	
	case "github_project_card":
		rp = &v1alpha1project.CardParameters{}
	
	case "github_project_column":
		rp = &v1alpha1project.ColumnParameters{}
	
	case "github_repository":
		rp = &v1alpha1github.RepositoryParameters{}
	
	case "github_repository_autolink_reference":
		rp = &v1alpha1.AutolinkReferenceParameters{}
	
	case "github_repository_collaborator":
		rp = &v1alpha1.CollaboratorParameters{}
	
	case "github_repository_deploy_key":
		rp = &v1alpha1.DeployKeyParameters{}
	
	case "github_repository_environment":
		rp = &v1alpha1.EnvironmentParameters{}
	
	case "github_repository_file":
		rp = &v1alpha1.FileParameters{}
	
	case "github_repository_milestone":
		rp = &v1alpha1.MilestoneParameters{}
	
	case "github_repository_project":
		rp = &v1alpha1.ProjectParameters{}
	
	case "github_repository_pull_request":
		rp = &v1alpha1.PullRequestParameters{}
	
	case "github_repository_webhook":
		rp = &v1alpha1.WebhookParameters{}
	
	case "github_team":
		rp = &v1alpha1github.TeamParameters{}
	
	case "github_team_membership":
		rp = &v1alpha1team.MembershipParameters{}
	
	case "github_team_repository":
		rp = &v1alpha1team.RepositoryParameters{}
	
	case "github_team_sync_group_mapping":
		rp = &v1alpha1team.SyncGroupMappingParameters{}
	
	case "github_user_gpg_key":
		rp = &v1alpha1user.GpgKeyParameters{}
	
	case "github_user_invitation_accepter":
		rp = &v1alpha1user.InvitationAccepterParameters{}
	
	case "github_user_ssh_key":
		rp = &v1alpha1user.SSHKeyParameters{}
	
	default:
		return "", errors.New("Invalid Resource Type " + terraformResourceType)
	}

	err := tfjson.TFParser.Unmarshal(data, rp)
	if err != nil {
		return nil, err
	}

	return rp, nil
}
