/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CollaboratorObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	InvitationID *string `json:"invitationId,omitempty" tf:"invitation_id,omitempty"`
}

type CollaboratorParameters struct {

	// +kubebuilder:validation:Optional
	Permission *string `json:"permission,omitempty" tf:"permission,omitempty"`

	// +kubebuilder:validation:Optional
	PermissionDiffSuppression *bool `json:"permissionDiffSuppression,omitempty" tf:"permission_diff_suppression,omitempty"`

	// +kubebuilder:validation:Required
	Repository *string `json:"repository" tf:"repository,omitempty"`

	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

// CollaboratorSpec defines the desired state of Collaborator
type CollaboratorSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CollaboratorParameters `json:"forProvider"`
}

// CollaboratorStatus defines the observed state of Collaborator.
type CollaboratorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CollaboratorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Collaborator is the Schema for the Collaborators API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,githubjet}
type Collaborator struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CollaboratorSpec   `json:"spec"`
	Status            CollaboratorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CollaboratorList contains a list of Collaborators
type CollaboratorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Collaborator `json:"items"`
}

// Repository type metadata.
var (
	Collaborator_Kind             = "Collaborator"
	Collaborator_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Collaborator_Kind}.String()
	Collaborator_KindAPIVersion   = Collaborator_Kind + "." + CRDGroupVersion.String()
	Collaborator_GroupVersionKind = CRDGroupVersion.WithKind(Collaborator_Kind)
)

func init() {
	SchemeBuilder.Register(&Collaborator{}, &CollaboratorList{})
}
