/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RunnerGroupObservation struct {
	AllowsPublicRepositories *bool `json:"allowsPublicRepositories,omitempty" tf:"allows_public_repositories,omitempty"`

	Default *bool `json:"default,omitempty" tf:"default,omitempty"`

	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Inherited *bool `json:"inherited,omitempty" tf:"inherited,omitempty"`

	RunnersURL *string `json:"runnersUrl,omitempty" tf:"runners_url,omitempty"`

	SelectedRepositoriesURL *string `json:"selectedRepositoriesUrl,omitempty" tf:"selected_repositories_url,omitempty"`
}

type RunnerGroupParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	SelectedRepositoryIds []*float64 `json:"selectedRepositoryIds,omitempty" tf:"selected_repository_ids,omitempty"`

	// +kubebuilder:validation:Required
	Visibility *string `json:"visibility" tf:"visibility,omitempty"`
}

// RunnerGroupSpec defines the desired state of RunnerGroup
type RunnerGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RunnerGroupParameters `json:"forProvider"`
}

// RunnerGroupStatus defines the observed state of RunnerGroup.
type RunnerGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RunnerGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RunnerGroup is the Schema for the RunnerGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,githubjet}
type RunnerGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RunnerGroupSpec   `json:"spec"`
	Status            RunnerGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RunnerGroupList contains a list of RunnerGroups
type RunnerGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RunnerGroup `json:"items"`
}

// Repository type metadata.
var (
	RunnerGroup_Kind             = "RunnerGroup"
	RunnerGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RunnerGroup_Kind}.String()
	RunnerGroup_KindAPIVersion   = RunnerGroup_Kind + "." + CRDGroupVersion.String()
	RunnerGroup_GroupVersionKind = CRDGroupVersion.WithKind(RunnerGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&RunnerGroup{}, &RunnerGroupList{})
}
