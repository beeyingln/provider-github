/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AllowedActionsConfigObservation struct {
}

type AllowedActionsConfigParameters struct {

	// +kubebuilder:validation:Required
	GithubOwnedAllowed *bool `json:"githubOwnedAllowed" tf:"github_owned_allowed,omitempty"`

	// +kubebuilder:validation:Optional
	PatternsAllowed []*string `json:"patternsAllowed,omitempty" tf:"patterns_allowed,omitempty"`

	// +kubebuilder:validation:Optional
	VerifiedAllowed *bool `json:"verifiedAllowed,omitempty" tf:"verified_allowed,omitempty"`
}

type EnabledRepositoriesConfigObservation struct {
}

type EnabledRepositoriesConfigParameters struct {

	// +kubebuilder:validation:Required
	RepositoryIds []*float64 `json:"repositoryIds" tf:"repository_ids,omitempty"`
}

type OrganizationPermissionsObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type OrganizationPermissionsParameters struct {

	// +kubebuilder:validation:Optional
	AllowedActions *string `json:"allowedActions,omitempty" tf:"allowed_actions,omitempty"`

	// +kubebuilder:validation:Optional
	AllowedActionsConfig []AllowedActionsConfigParameters `json:"allowedActionsConfig,omitempty" tf:"allowed_actions_config,omitempty"`

	// +kubebuilder:validation:Required
	EnabledRepositories *string `json:"enabledRepositories" tf:"enabled_repositories,omitempty"`

	// +kubebuilder:validation:Optional
	EnabledRepositoriesConfig []EnabledRepositoriesConfigParameters `json:"enabledRepositoriesConfig,omitempty" tf:"enabled_repositories_config,omitempty"`
}

// OrganizationPermissionsSpec defines the desired state of OrganizationPermissions
type OrganizationPermissionsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     OrganizationPermissionsParameters `json:"forProvider"`
}

// OrganizationPermissionsStatus defines the observed state of OrganizationPermissions.
type OrganizationPermissionsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        OrganizationPermissionsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OrganizationPermissions is the Schema for the OrganizationPermissionss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,githubjet}
type OrganizationPermissions struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OrganizationPermissionsSpec   `json:"spec"`
	Status            OrganizationPermissionsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OrganizationPermissionsList contains a list of OrganizationPermissionss
type OrganizationPermissionsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OrganizationPermissions `json:"items"`
}

// Repository type metadata.
var (
	OrganizationPermissions_Kind             = "OrganizationPermissions"
	OrganizationPermissions_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OrganizationPermissions_Kind}.String()
	OrganizationPermissions_KindAPIVersion   = OrganizationPermissions_Kind + "." + CRDGroupVersion.String()
	OrganizationPermissions_GroupVersionKind = CRDGroupVersion.WithKind(OrganizationPermissions_Kind)
)

func init() {
	SchemeBuilder.Register(&OrganizationPermissions{}, &OrganizationPermissionsList{})
}
