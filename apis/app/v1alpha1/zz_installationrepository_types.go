/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InstallationRepositoryObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	RepoID *float64 `json:"repoId,omitempty" tf:"repo_id,omitempty"`
}

type InstallationRepositoryParameters struct {

	// +kubebuilder:validation:Required
	InstallationID *string `json:"installationId" tf:"installation_id,omitempty"`

	// +kubebuilder:validation:Required
	Repository *string `json:"repository" tf:"repository,omitempty"`
}

// InstallationRepositorySpec defines the desired state of InstallationRepository
type InstallationRepositorySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstallationRepositoryParameters `json:"forProvider"`
}

// InstallationRepositoryStatus defines the observed state of InstallationRepository.
type InstallationRepositoryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstallationRepositoryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// InstallationRepository is the Schema for the InstallationRepositorys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,githubjet}
type InstallationRepository struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InstallationRepositorySpec   `json:"spec"`
	Status            InstallationRepositoryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstallationRepositoryList contains a list of InstallationRepositorys
type InstallationRepositoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InstallationRepository `json:"items"`
}

// Repository type metadata.
var (
	InstallationRepository_Kind             = "InstallationRepository"
	InstallationRepository_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InstallationRepository_Kind}.String()
	InstallationRepository_KindAPIVersion   = InstallationRepository_Kind + "." + CRDGroupVersion.String()
	InstallationRepository_GroupVersionKind = CRDGroupVersion.WithKind(InstallationRepository_Kind)
)

func init() {
	SchemeBuilder.Register(&InstallationRepository{}, &InstallationRepositoryList{})
}
