/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ColumnObservation struct {
	ColumnID *float64 `json:"columnId,omitempty" tf:"column_id,omitempty"`

	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ColumnParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`
}

// ColumnSpec defines the desired state of Column
type ColumnSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ColumnParameters `json:"forProvider"`
}

// ColumnStatus defines the observed state of Column.
type ColumnStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ColumnObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Column is the Schema for the Columns API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,githubjet}
type Column struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ColumnSpec   `json:"spec"`
	Status            ColumnStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ColumnList contains a list of Columns
type ColumnList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Column `json:"items"`
}

// Repository type metadata.
var (
	Column_Kind             = "Column"
	Column_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Column_Kind}.String()
	Column_KindAPIVersion   = Column_Kind + "." + CRDGroupVersion.String()
	Column_GroupVersionKind = CRDGroupVersion.WithKind(Column_Kind)
)

func init() {
	SchemeBuilder.Register(&Column{}, &ColumnList{})
}
