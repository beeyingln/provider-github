/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CardObservation struct {
	CardID *float64 `json:"cardId,omitempty" tf:"card_id,omitempty"`

	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CardParameters struct {

	// +kubebuilder:validation:Required
	ColumnID *string `json:"columnId" tf:"column_id,omitempty"`

	// +kubebuilder:validation:Required
	Note *string `json:"note" tf:"note,omitempty"`
}

// CardSpec defines the desired state of Card
type CardSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CardParameters `json:"forProvider"`
}

// CardStatus defines the observed state of Card.
type CardStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CardObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Card is the Schema for the Cards API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,githubjet}
type Card struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CardSpec   `json:"spec"`
	Status            CardStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CardList contains a list of Cards
type CardList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Card `json:"items"`
}

// Repository type metadata.
var (
	Card_Kind             = "Card"
	Card_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Card_Kind}.String()
	Card_KindAPIVersion   = Card_Kind + "." + CRDGroupVersion.String()
	Card_GroupVersionKind = CRDGroupVersion.WithKind(Card_Kind)
)

func init() {
	SchemeBuilder.Register(&Card{}, &CardList{})
}
