/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GpgKeyObservation struct {
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`
}

type GpgKeyParameters struct {

	// +kubebuilder:validation:Required
	ArmoredPublicKey *string `json:"armoredPublicKey" tf:"armored_public_key,omitempty"`
}

// GpgKeySpec defines the desired state of GpgKey
type GpgKeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GpgKeyParameters `json:"forProvider"`
}

// GpgKeyStatus defines the observed state of GpgKey.
type GpgKeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GpgKeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GpgKey is the Schema for the GpgKeys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,githubjet}
type GpgKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GpgKeySpec   `json:"spec"`
	Status            GpgKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GpgKeyList contains a list of GpgKeys
type GpgKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GpgKey `json:"items"`
}

// Repository type metadata.
var (
	GpgKey_Kind             = "GpgKey"
	GpgKey_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GpgKey_Kind}.String()
	GpgKey_KindAPIVersion   = GpgKey_Kind + "." + CRDGroupVersion.String()
	GpgKey_GroupVersionKind = CRDGroupVersion.WithKind(GpgKey_Kind)
)

func init() {
	SchemeBuilder.Register(&GpgKey{}, &GpgKeyList{})
}
